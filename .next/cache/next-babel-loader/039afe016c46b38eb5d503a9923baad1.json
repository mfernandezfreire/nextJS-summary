{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/  Disco Externo/DEVS/Udemy/React/Colt Steele/Exercises/nextJS/pages/post.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import { withRouter } from \"next/router\";\nimport axios from \"axios\";\n\nvar Post = function Post(_ref) {\n  var id = _ref.id,\n      comments = _ref.comments;\n  console.log(id, comments);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, \"You are looking at post \", id), comments.map(function (comment) {\n    return __jsx(Comments, {\n      email: comment.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }\n    });\n  }));\n};\n\n_c = Post;\n\nvar Comments = function Comments(_ref2) {\n  var email = _ref2.email,\n      body = _ref2.body;\n  console.log(email);\n\n  __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 3\n    }\n  }, __jsx(\"h5\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, email), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, body));\n};\n\n_c2 = Comments;\n\nPost.getInitialProps = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3) {\n    var query, res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref3.query;\n            _context.next = 3;\n            return axios.get( // https://jsonplaceholder.typicode.com/posts\n            \"https://jsonplaceholder.typicode.com/comments?postId=3\");\n\n          case 3:\n            res = _context.sent;\n            data = res.data;\n            console.log(data);\n            return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, query), {}, {\n              comments: data\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref4.apply(this, arguments);\n  };\n}(); // Also we can do it with withRouter that way ; )\n// import { withRouter } from \"next/router\";\n// const Post = (props) => (\n//   <h1>You are looking at post {props.router.query.id}</h1>\n// );\n\n\nexport default Post; // export default withRouter(Post);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Post\");\n$RefreshReg$(_c2, \"Comments\");","map":{"version":3,"sources":["/Volumes/  Disco Externo/DEVS/Udemy/React/Colt Steele/Exercises/nextJS/pages/post.js"],"names":["axios","Post","id","comments","console","log","map","comment","email","Comments","body","getInitialProps","query","get","res","data"],"mappings":";;;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAsB;AAAA,MAAnBC,EAAmB,QAAnBA,EAAmB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ,EAAgBC,QAAhB;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAA6BD,EAA7B,CADF,EAEGC,QAAQ,CAACG,GAAT,CAAa,UAACC,OAAD;AAAA,WACZ,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,OAAO,CAACC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADY;AAAA,GAAb,CAFH,CADF;AAQD,CAVD;;KAAMP,I;;AAYN,IAAMQ,QAAQ,GAAG,SAAXA,QAAW,QAAqB;AAAA,MAAlBD,KAAkB,SAAlBA,KAAkB;AAAA,MAAXE,IAAW,SAAXA,IAAW;AACpCN,EAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIE,IAAJ,CAFF;AAID,CAND;;MAAMD,Q;;AAQNR,IAAI,CAACU,eAAL;AAAA,uEAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,KAAT,SAASA,KAAT;AAAA;AAAA,mBACHZ,KAAK,CAACa,GAAN,EAChB;AACA,oEAFgB,CADG;;AAAA;AACfC,YAAAA,GADe;AAKbC,YAAAA,IALa,GAKJD,GALI,CAKbC,IALa;AAMrBX,YAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;AANqB,6EAOTH,KAPS;AAOFT,cAAAA,QAAQ,EAAEY;AAPR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA,I,CAUA;AACA;AAEA;AACA;AACA;;;AAEA,eAAed,IAAf,C,CAEA","sourcesContent":["// import { withRouter } from \"next/router\";\nimport axios from \"axios\";\n\nconst Post = ({ id, comments }) => {\n  console.log(id, comments);\n  return (\n    <div>\n      <h1>You are looking at post {id}</h1>\n      {comments.map((comment) => (\n        <Comments email={comment.email} />\n      ))}\n    </div>\n  );\n};\n\nconst Comments = ({ email, body }) => {\n  console.log(email);\n  <div>\n    <h5>{email}</h5>\n    <p>{body}</p>\n  </div>;\n};\n\nPost.getInitialProps = async ({ query }) => {\n  const res = await axios.get(\n    // https://jsonplaceholder.typicode.com/posts\n    \"https://jsonplaceholder.typicode.com/comments?postId=3\"\n  );\n  const { data } = res;\n  console.log(data);\n  return { ...query, comments: data };\n};\n\n// Also we can do it with withRouter that way ; )\n// import { withRouter } from \"next/router\";\n\n// const Post = (props) => (\n//   <h1>You are looking at post {props.router.query.id}</h1>\n// );\n\nexport default Post;\n\n// export default withRouter(Post);\n"]},"metadata":{},"sourceType":"module"}