{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Volumes/  Disco Externo/DEVS/Udemy/React/Colt Steele/Exercises/nextJS/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n// import App from \"next/app\";\n// import Navbar from \"../components/Navbar\";\n// class MyApp extends App {\n//   render() {\n//     const { Component, pageProps } = this.props;\n//     return (\n//       <div>\n//         <Navbar />\n//         <Component {...pageProps} />\n//       </div>\n//     );\n//   }\n// }\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//   return { ...appProps };\n// };\n// export default MyApp;\n// import App from 'next/app'\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }\n  }));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Volumes/  Disco Externo/DEVS/Udemy/React/Colt Steele/Exercises/nextJS/pages/_app.js"],"names":["MyApp","Component","pageProps"],"mappings":";;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA,SAASA,KAAT,OAAyC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACvC,SAAO,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAdSF,K;AAgBT,eAAeA,KAAf","sourcesContent":["// import App from \"next/app\";\n// import Navbar from \"../components/Navbar\";\n\n// class MyApp extends App {\n//   render() {\n//     const { Component, pageProps } = this.props;\n\n//     return (\n//       <div>\n//         <Navbar />\n//         <Component {...pageProps} />\n//       </div>\n//     );\n//   }\n// }\n\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//   return { ...appProps };\n// };\n\n// export default MyApp;\n\n// import App from 'next/app'\n\nfunction MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />;\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}